; This file is kind of a mess
; Sorry you have to read this
.psx

; Texture Table Reference
; 0600 78FF 98FF 68 28 18 20 3520 807D
; NMBR XPOS YPOS XT YT XS YS ???? PALT
; 
; NMBR: Number of Textures
; XPOS: Pos X of Texture
; YPOS: Pos Y of texture
;   XT: Position offset X of VRAM for texture
;   YT: Position offset Y of VRAM for texture
;   XS: Size X of texture
;   YS: Size Y of texture
; ????: Likely texture bit flags for texture image type.
; PALT: Palette ID

; Options Menu text encoding:
;   NOTE: This is kinda wrong 'cause I didn't understand it when I wrote this
;         but the character list is still helpful
; WW CR
; W = Width, 0 by default, increasing shortens the width of the character (0x10 for I)
;   also does other character sets? 0x04 for blue highlight
; CR = Character
;  (00-BF invalid)
;  - = C0
;  0 = C1
;  A = CB
;  B = CC
;  C = CD
;  D = CE
;  E = CF
;  F = D0
;  G = D1
;  H = D2
;  I = D3 (use width 10)
;  J = D4
;  K = D5
;  L = D6
;  M = D7
;  N = D8
;  D9 invalid?
;  O = E0
;  P = E1
;  Q = E2
;  R = E3
;  S = E4
;  T = E5
;  U = E6
;  V = E7
;  W = E8
;  X = E9
;  Y = EA
;  Z = EB
;  Space = 0x81, only one byte for some reason
;  half space thingy = 0x10,0x98


; Main table.
; The way we are redirecting "half pointers" here is to use a 0xEXXX pointer, where E is a flag to redirect
; a string here, and XXX is used to address the string in our custom string table.
; Convienently, 0xEXXX already lines up with the final address we need of 0x801FEXXX, so we just load
; 0x801F into the base address if we detect the 0xEXXX flag (can't be 0x8020 because it's an unsigned add, grrr)

; let's keep this dirty little secret of 1 wasted byte to avoid a pointer with 0x00 in it between us, yeah?
.byte 0


OptionFiveString:
; "RANDOM STAGE"
.byte 0x00,0xE3, 0x00,0xCB, 0x00,0xD8, 0x00,0xCE, 0x00,0xE0, 0x00,0xD7, 0x81, 0x00,0xE4, 0x00,0xE5, 0x00,0xCB, 0x00,0xD1, 0x00,0xCF, 0x10,0x98, 0xFF

OptionSixString:
; "FRAMERATE"
.byte 0x00,0xD0, 0x00,0xE3, 0x00,0xCB, 0x00,0xD7, 0x00,0xCF, 0x00,0xE3, 0x00,0xCB, 0x00,0xE5, 0x00,0xCF, 0x81,0x81,0x81,0x10,0x98, 0xFF

OptionsSevenString:
; "MUSIC (NOTE)"
.byte 0x00,0xD7, 0x00,0xE6, 0x00,0xE4, 0x10,0xD3, 0x00,0xCD, 0x01,0x11, 0x81,0x81,0x81,0x81,0x81,0x81,0x81,  0xFF

Yeh:
.byte 0x12,0x98, 0x20,0xEA, 0x20,0xCF, 0x20,0xD2, 0x12,0x98, 0xFF

Naw:
.byte 0x12,0x98, 0x20,0xD8, 0x20,0xCB, 0x20,0xE8, 0x12,0x98, 0xFF

Sixty:
.byte 0x12,0x98, 0x00,0xC7, 0x00,0xC1, 0x12,0x98, 0xFF

Thirty:
.byte 0x12,0x98, 0x00,0xC4, 0x00,0xC1, 0x12,0x98, 0xFF

ComboKyoVer:
; This is the string used in the current release, which I left here for convienent, but I commented it out since
; I expect you'll update the version number one way or another if you do anything with this code base.
; "COMBOKYO EDITION DEV" is left as the default for now, which means what it says: a dev build only for testing.

; "COMBOKYO EDITION V1RC4"
;.byte 0x00,0xCD, 0x00,0xE0, 0x00,0xD7, 0x00,0xCC, 0x00,0xE0, 0x00,0xD5, 0x00,0xEA, 0x00,0xE0, 0x81, 0x00,0xCF, 0x00,0xCE, 0x10,0xD3, 0x00,0xE5, 0x10,0xD3, 0x00,0xE0, 0x00,0xD8, 0x81, 0x00,0xE7, 0x00,0xC2, 0x00,0xE3, 0x00,0xCD, 0x00,0xC5, 0xFF
; "COMBOKYO EDITION DEV"
.byte 0x00,0xCD, 0x00,0xE0, 0x00,0xD7, 0x00,0xCC, 0x00,0xE0, 0x00,0xD5, 0x00,0xEA, 0x00,0xE0, 0x81, 0x00,0xCF, 0x00,0xCE, 0x10,0xD3, 0x00,0xE5, 0x10,0xD3, 0x00,0xE0, 0x00,0xD8, 0x81, 0x00,0xCE, 0x00,0xCF, 0x00,0xE7, 0xFF

Original:
.byte 0x12,0x98, 0x00,0xE0, 0x00,0xE3, 0x10,0xD3, 0x00,0xD1, 0x10,0xD3, 0x00,0xD8, 0x00,0xCB, 0x00,0xD6, 0x12,0x98, 0xFF

Community:
.byte 0x12,0x98, 0x00,0xCD, 0x00,0xE0, 0x00,0xD7, 0x00,0xD7, 0x00,0xE6, 0x00,0xD8, 0x10,0xD3, 0x00,0xE5, 0x00,0xEA, 0x12,0x98, 0xFF

Random:
.byte 0x12,0x98, 0x00,0xE3, 0x00,0xCB, 0x00,0xD8, 0x00,0xCE, 0x00,0xE0, 0x00,0xD7, 0x12,0x98, 0xFF


; And now, for a general data table. Mostly used for replacing data in the game's texture tables,
; or for replacing the "half" pointers that point to the above string table.

.align 2
HammaHammaTexture:
.byte 0x02,0x00, 0xEB,0xFF, 0xF8,0xFF, 0x09,0xC0, 0x29,0x08, 0x18,0x00, 0xC4,0x7F
.byte            0xEB,0xFF, 0x00,0x00, 0x09,0xC0, 0x29,0x08, 0x18,0x00, 0xC4,0x7F

ZedGundamTexture:
.byte 0x02,0x00, 0xFB,0xFF, 0xF8,0xFF, 0x0A,0xA8, 0x0A,0x08, 0x18,0x00, 0xC4,0x7F
.byte            0xE8,0xFF, 0x00,0x00, 0x15,0x80, 0x32,0x08, 0x18,0x00, 0xC4,0x7F

QubeleyTexture:
.byte 0x01,0x00, 0xE1,0xFF, 0xFC,0xFF, 0x0A,0xB8, 0x3D,0x08, 0x18,0x00, 0xC4,0x7F

ComboKyoString:
.byte 0x00,0, 0,0, 0x20,0xC0, 0,0, 0,0,0,0 ; "C"
.byte 0x00,0, 0,0, 0xD9,0xC0, 0,0, 0,0,0,0 ; "O"
.byte 0x00,0, 0,0, 0xB9,0xC0, 0,0, 0,0,0,0 ; "M"
.byte 0x00,0, 0,0, 0x10,0xC0, 0,0, 0,0,0,0 ; "B"
.byte 0xB1,0, 0,0, 0xD9,0xC0, 0,0, 0,0,0,0 ; "O"
.byte 0x00,0, 0,0, 0x98,0xC0, 0,0, 0,0,0,0 ; "K"
.byte 0xD8,0, 0,0, 0xD9,0xC0, 0,0, 0,0,0,0 ; "O"
.byte 0xCB,0, 0,0, 0x81,0xD0, 0,0, 0,0,0,0 ; "Y" (Yes, the original string is actually P2)
.byte 0xFF

SwappedPilotDisplay:
.halfword lo(Naw), lo(Yeh)
.byte 0xFF

RenamedHitDisplay:
.halfword lo(Yeh), lo(Naw)
.byte 0xFF

ExpandedOptionsFive:
.halfword lo(OptionFiveString), lo(Yeh), lo(Naw)
.byte 0xFF

ExpandedOptionsSix:
.halfword lo(OptionSixString), lo(Sixty), lo(Thirty)
.byte 0xFF

ExpandedOptionsSeven:
.halfword lo(OptionsSevenString), lo(Original), lo(Community), lo(Random)
.byte 0xFF

ExpandedOptionsEight:
.halfword lo(ComboKyoVer)
.byte 0xFF


; padding to realign the payload back to the word boundry
.align
